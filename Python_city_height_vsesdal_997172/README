задание должно быть выполнено в версии python 3.6!! 

Обрабатываются города и их высоты над уровнем моря. Задание состоит из нескольких 
частей. 
1. Вывести на экран города в порядке возрастания их высот (отсортировать по 
возрастания) 
2. Найти по заданному диапазону высот все города с высотами над уровнем моря из 
диапазона (либо методом двоичного поиска в отсортированном списке, либо сравнением 
всех элементов) 
Условие 
На вход программе подается целое число N – число вводимых далее пар. Затем вводится 
вещественные числа D и G. Затем вводятся N пар: название города и высота над уровнем 
моря. 
Необходимо создать функцию для сортировки и функцию для поиска элементов. Для 
преобразования введенной строки в целое число использовать функцию int(x), а для 
преобразования в вещественное число функцию float(x). 
Входные данные: 
На вход программе приходит целое число N, вещественные числа D и G, и пары, 
состоящие из строк и вещественных чисел. 
Ввод программы должен выглядеть примерно следующим образом (пример для N = 3, 
D=7.0, G=8.0): 
“3 
7.0 
8.0 
Москва 10.5 
СПБ 1.6 
ЕКБ 7.5” 
Выходные данные 
Вывод программы должен выглядеть примерно следующим образом (для ввода выше и 
варианта 1): 
“Москва 10.5 
ЕКБ 7.5 
СПБ 1.6 
============== 
ЕКБ 7.5 > 7.0 и 7.5 < 8.0” 

Дополнительная информация 
1. Для сортировки можно использовать любой алгоритм. Простейшие варианты: 
а) Сортировка «пузырьком». 
https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0% 
BE%D0%B2%D0%BA%D0%B0_%D0%BF%D1%83%D0%B7%D1%8B%D1%80%D1%8C 
%D0%BA%D0%BE%D0%BC 
b) Сортировка выбором. 
https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0% 
BE%D0%B2%D0%BA%D0%B0_%D0%B2%D1%8B%D0%B1%D0%BE%D1%80%D0%BE 
%D0%BC 
2. При поиске в отсортированном списке не нужно просматрировать все элементы, 
чтобы найти необходимый. Гораздо эффективнее использовать метод двоичного 
поиска (бинарного поиска): 
https://ru.wikipedia.org/wiki/%D0%94%D0%B2%D0%BE%D0%B8%D1%87%D0%B 
D%D1%8B%D0%B9_%D0%BF%D0%BE%D0%B8%D1%81%D0%BA 
Пример: поиск элемента “3” в отсортированном списке. Первое сравнение 
середины даёт нам знание, что элемент находится где-то слева в списке. 
Сокращаем область поиска и сравниваем её середину и т.д.
